# Custom values for cert-manager Helm chart.
# Assumptions: AWS EKS; prerequisites: ClusterIssuer for Let's Encrypt (created post-install).
# Official chart: https://charts.jetstack.io, version 1.15.3
# Alternatives: None; this is the official Jetstack chart.

installCRDs: true  # Install CRDs with the chart for idempotency

replicaCount: 2

image:
  repository: quay.io/jetstack/cert-manager-controller
  pullPolicy: IfNotPresent
  # tag: 1.15.3  # Managed by chart version

resources:
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    cpu: 200m
    memory: 512Mi

# Webhook configuration
webhook:
  enabled: true
  resources:
    requests:
      cpu: 10m
      memory: 32Mi
    limits:
      cpu: 50m
      memory: 128Mi
  # For AWS, ensure webhook service has proper annotations if needed

# Global settings
global:
  # Pod security
  podSecurityPolicy:
    enabled: false  # Deprecated in newer K8s
  leaderElection:
    namespace: cert-manager  # Dedicated namespace

# Metrics and monitoring
extraArgs:
  - --enable-metrics=true
metrics:
  serviceMonitor:
    enabled: true  # For Prometheus

# Security contexts
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true

# RBAC
rbac:
  create: true

# Service account
serviceAccount:
  create: true
  annotations: {}

# For Let's Encrypt, create ClusterIssuer separately; placeholder email/domain
# Example ClusterIssuer YAML: apiVersion: cert-manager.io/v1 kind: ClusterIssuer metadata: name: letsencrypt-prod spec: acme: server: https://acme-v02.api.letsencrypt.org/directory email: your-email@example.com privateKeySecretRef: name: letsencrypt-prod solver: http01: ingress: class: nginx  # Matches ingress class