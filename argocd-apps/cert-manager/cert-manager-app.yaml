apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: cert-manager
  namespace: argocd  # Assumes ArgoCD in 'argocd' namespace
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
  # Labels: e.g., app.kubernetes.io/name: cert-manager
spec:
  project: default  # Dedicated project recommended
  source:
    repoURL: https://charts.jetstack.io  # Official Helm repo
    chart: cert-manager
    targetRevision: 1.15.3  # Latest stable; pin for production
    helm:
      releaseName: cert-manager
      values: |
        installCRDs: true  # Install CRDs with the chart for idempotency
        replicaCount: 2
        image:
          repository: quay.io/jetstack/cert-manager-controller
          pullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 200m
            memory: 512Mi
        webhook:
          enabled: true
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
            limits:
              cpu: 50m
              memory: 128Mi
        global:
          podSecurityPolicy:
            enabled: false  # Deprecated in newer K8s
          leaderElection:
            namespace: cert-manager  # Dedicated namespace
        podSecurityContext:
          runAsNonRoot: true
          runAsUser: 1000
          fsGroup: 2000
        rbac:
          create: true
        serviceAccount:
          create: true
          name: cert-manager
          annotations:
            eks.amazonaws.com/role-arn: "arn:aws:iam::704855531002:role/eks-llm-cert-manager"
      postRenderer: |
        #!/bin/sh
        set -e  # Exit on any error

        # Create issuer YAML (de-indented; no leading spaces)
        cat > /tmp/issuer.yaml <<- EOF
        ---
        apiVersion: cert-manager.io/v1
        kind: ClusterIssuer
        metadata:
          name: letsencrypt-prod
          annotations:
            argocd.argoproj.io/sync-wave: "1"
        spec:
          acme:
            server: https://acme-v02.api.letsencrypt.org/directory
            email: andrew.deweever@bscanalytics.com
            privateKeySecretRef:
              name: letsencrypt-prod
            solvers:
            - dns01:
                route53:
                  region: us-west-2
        EOF

        # Validate the issuer YAML
        if ! kubectl apply --dry-run=client --server-side -f /tmp/issuer.yaml; then
          echo "ERROR: Issuer YAML validation failed"
          cat /tmp/issuer.yaml  # Log for debug
          exit 1
        fi
        echo "Issuer YAML validated successfully"

        # Merge: Append to input
        cat $INFILE /tmp/issuer.yaml > $OUTFILE

        echo "PostRenderer completed: ClusterIssuer appended"
  destination:
    server: https://kubernetes.default.svc
    namespace: cert-manager  # Dedicated namespace
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true
      - Validate=true
    # Sync waves: CRDs first if needed, but installCRDs=true handles
  # info: {}  # Optional: Add post-sync hooks for ClusterIssuer
  # Assumptions: AWS EKS; post-install: Create ClusterIssuer for Let's Encrypt as noted in values.yaml