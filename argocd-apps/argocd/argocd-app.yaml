apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: argocd
  namespace: argocd  # Assumes ArgoCD is managing itself; initial bootstrap may require manual install or separate mechanism
  # Labels: e.g., app.kubernetes.io/name: argocd
spec:
  project: default  # Dedicated project recommended for production
  source:
    repoURL: https://argoproj.github.io/argo-helm  # Official Argo Helm repo
    chart: argo-cd
    targetRevision: 8.5.8  # Latest stable version as of 2025-10-01; pin and update semantically for production
    helm:
      releaseName: argocd
      values: |
        global:
          domain: argo.deweever.bsisandbox.com
        configs:
          params:
            server.insecure: true
        server:
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
          ingress:
            enabled: true
            ingressClassName: nginx
            annotations:
              cert-manager.io/cluster-issuer: letsencrypt-prod
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
            hostname: argo.deweever.bsisandbox.com  # Replace with actual
            path: /
            tls:
              - secretName: argocd-tls  # Secret created by cert-manager
                hosts:
                  - argo.deweever.bsisandbox.com
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            fsGroup: 2000
        controller:
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
          replicaCount: 1
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            fsGroup: 2000
        repoServer:
          resources:
            requests:
              cpu: 500m
              memory: 512Mi
            limits:
              cpu: 1
              memory: 1Gi
          replicaCount: 1
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            fsGroup: 2000
        installCRDs: true
        rbac:
          create: true
        dex:
          enabled: false
        redis:
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
        notifications:
          enabled: false
        applicationset:
          enabled: false
  destination:
    server: https://kubernetes.default.svc  # In-cluster Kubernetes API
    namespace: argocd  # Dedicated namespace for ArgoCD
  syncPolicy:
    automated:
      prune: true  # Automatically delete resources not in Git
      selfHeal: true  # Automatically sync if out of sync
    syncOptions:
      - CreateNamespace=true  # Create the 'argocd' namespace if it doesn't exist
      - ApplyOutOfSyncOnly=true  # Only apply changes if out of sync for efficiency
    # Sync waves: ArgoCD chart handles CRDs first via installCRDs=true in values.yaml
  # IgnoreDifferences: Add if needed for resources that change externally, e.g., for EKS managed fields
  # info: {}  # Optional: Add post-sync hooks or application info like external URL
# Assumptions: AWS EKS cluster; prerequisites: EKS cluster running, IAM roles for ArgoCD if using external secrets/external repos.
# Best practices: Enable RBAC in values.yaml, set resource limits, use secure server config.
# For private Git repo: Configure ArgoCD repo credentials separately.
# Alternatives: If preferring Git-based chart, use repoURL: https://github.com/argoproj/argo-helm.git, path: charts/argo-cd