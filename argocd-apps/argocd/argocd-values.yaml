# Custom values for ArgoCD Helm chart - Production-like setup for AWS EKS
# Assumptions: EKS cluster with OIDC for IRSA; initial ArgoCD bootstrap via this manifest or manual kubectl apply.
# Prerequisites: Namespace 'argocd' created; for private repos, configure ArgoCD repo secrets separately.
# Best practices: Enable HA with replicas >1, resource limits to prevent OOM, secure server (no insecure flag), RBAC enabled.
# For EKS: Use annotations for ALB if exposing server; integrate with IAM for external secrets if needed.
# Update semantic version in app.yaml when upgrading chart.

global:
  domain: argo.deweever.bsisandbox.com  # Replace with your domain; use for ingress/hostname
  # image: argoproj/argo-cd:latest  # Pin to specific digest for security in prod

server:
  # insecure: false  # Disabled for production; access via secure ingress
  extraArgs:
    - --insecure  # Temporarily enable for initial setup; remove after configuring ingress/auth
  resources:
    requests:
      cpu: 250m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  # For EKS ALB: Add ingress annotations if using nginx-ingress or ALB controller
  ingress:
    enabled: true
    className: nginx  # Use nginx-ingress-controller
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod  # Assumes ClusterIssuer 'letsencrypt-prod' from cert-manager; adjust if different
      nginx.ingress.kubernetes.io/ssl-redirect: "true"  # Redirect HTTP to HTTPS
      # Additional nginx annotations if needed, e.g., nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    hosts:
      - argo.deweever.bsisandbox.com  # Replace with actual
    path: /
    tls:
      - secretName: argocd-tls  # Auto-generated by cert-manager
        hosts:
          - argo.deweever.bsisandbox.com
  # Security: Run as non-root
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 2000

controller:
  resources:
    requests:
      cpu: 250m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  # HA: Multiple replicas for high availability
  replicaCount: 3
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 2000

repoServer:
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 1
      memory: 1Gi
  replicaCount: 3  # HA for repo operations
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 2000

# Install CRDs first
installCRDs: true

# RBAC: Enabled by default, but ensure for prod
rbac:
  create: true
  # Add custom roles if needed, e.g., for cluster-admin access

# Dex: For SSO, configure if using OIDC (e.g., with AWS Cognito)
dex:
  enabled: false  # Enable and configure for SSO in prod

# Redis: For HA, use external if needed, but default is fine
redis:
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi
  # For EKS, ensure pod security policies allow

# Notifications: Enable if using
notifications:
  enabled: false  # Configure controller for Slack/Email alerts

# ApplicationSet: If using advanced appsets
applicationset:
  enabled: false

# Global resource limits for all components
# Already set per component above

# Namespace-specific: Deploy to 'argocd' namespace (handled in app.yaml)
# For EKS Fargate: Add nodeSelector or tolerations if using Fargate profile
# nodeSelector: {}  # e.g., eks.amazonaws.com/compute-type: fargate
# tolerations: []  # For Fargate

# Post-install: After sync, access ArgoCD UI at https://argocd.example.com; default admin user/password from secret
# Update password immediately: kubectl -n argocd patch secret argocd-initial-admin-secret -p '{"stringData": {"admin.password": "'$(htpasswd -nbBC 10 "" newpassword | tr -d '\n\r')'"}}'